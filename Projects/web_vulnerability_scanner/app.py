from flask import Flask, request, jsonify, render_template_string
import subprocess
import os
import json
import threading
import time
from datetime import datetime

app = Flask(__name__)

# Store scan results in memory (in production, use a database)
scan_results = {}
scan_progress = {}

# HTML Template (จากไฟล์ที่คุณให้มา)
HTML_TEMPLATE = '''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CyberShield - Web Vulnerability Scanner</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-dark: #0a0a0f;
            --secondary-dark: #1a1a2e;
            --accent-blue: #16213e;
            --bright-blue: #0f4c75;
            --cyan: #3282b8;
            --purple: #4a148c;
            --light-purple: #7b1fa2;
            --neon-blue: #00e5ff;
            --neon-purple: #e91e63;
            --glass-bg: rgba(255, 255, 255, 0.05);
            --glass-border: rgba(255, 255, 255, 0.1);
            --text-primary: #ffffff;
            --text-secondary: #b0bec5;
            --success: #00ff88;
            --warning: #ff9800;
            --danger: #ff1744;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, var(--primary-dark) 0%, var(--secondary-dark) 25%, var(--accent-blue) 50%, var(--bright-blue) 75%, var(--purple) 100%);
            min-height: 100vh;
            color: var(--text-primary);
            overflow-x: hidden;
        }

        .background-animation {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
        }

        .floating-shapes {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .shape {
            position: absolute;
            background: linear-gradient(45deg, var(--neon-blue), var(--neon-purple));
            border-radius: 50%;
            opacity: 0.1;
            animation: float 15s infinite ease-in-out;
        }

        .shape:nth-child(1) { width: 80px; height: 80px; top: 10%; left: 10%; animation-delay: 0s; }
        .shape:nth-child(2) { width: 60px; height: 60px; top: 20%; right: 10%; animation-delay: 2s; }
        .shape:nth-child(3) { width: 100px; height: 100px; bottom: 10%; left: 20%; animation-delay: 4s; }
        .shape:nth-child(4) { width: 40px; height: 40px; bottom: 20%; right: 20%; animation-delay: 6s; }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            33% { transform: translateY(-30px) rotate(120deg); }
            66% { transform: translateY(15px) rotate(240deg); }
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
            z-index: 1;
        }

        .header {
            text-align: center;
            margin-bottom: 50px;
            padding: 40px 0;
        }

        .header h1 {
            font-size: 4rem;
            margin-bottom: 15px;
            background: linear-gradient(135deg, var(--neon-blue), var(--neon-purple));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 30px rgba(0, 229, 255, 0.3);
            position: relative;
        }

        .header .subtitle {
            font-size: 1.3rem;
            color: var(--text-secondary);
            font-weight: 300;
            letter-spacing: 0.5px;
        }

        .header .shield-icon {
            font-size: 3rem;
            color: var(--neon-blue);
            margin-bottom: 20px;
            text-shadow: 0 0 20px var(--neon-blue);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .scanner-card {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            border-radius: 25px;
            padding: 50px;
            margin-bottom: 40px;
            box-shadow: 
                0 25px 50px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
        }

        .scanner-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, var(--neon-blue), var(--neon-purple), var(--neon-blue));
            animation: shimmer 3s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .form-group {
            margin-bottom: 35px;
        }

        .form-group label {
            display: block;
            margin-bottom: 12px;
            font-weight: 600;
            color: var(--text-primary);
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .url-input {
            width: 100%;
            padding: 20px 25px;
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid var(--glass-border);
            border-radius: 15px;
            font-size: 16px;
            color: var(--text-primary);
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .url-input:focus {
            outline: none;
            border-color: var(--neon-blue);
            background: rgba(255, 255, 255, 0.08);
            box-shadow: 
                0 0 0 3px rgba(0, 229, 255, 0.1),
                0 0 20px rgba(0, 229, 255, 0.2);
        }

        .url-input::placeholder {
            color: var(--text-secondary);
        }

        .scan-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .option-card {
            background: rgba(255, 255, 255, 0.03);
            border: 2px solid var(--glass-border);
            border-radius: 18px;
            padding: 25px;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .option-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0, 229, 255, 0.2);
            border-color: var(--neon-blue);
        }

        .option-card.selected {
            background: linear-gradient(135deg, rgba(0, 229, 255, 0.15), rgba(233, 30, 99, 0.15));
            border-color: var(--neon-blue);
            transform: translateY(-5px);
            box-shadow: 
                0 15px 30px rgba(0, 229, 255, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.2);
        }

        .option-card input[type="checkbox"] {
            display: none;
        }

        .option-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 10px;
        }

        .option-icon {
            font-size: 1.8rem;
            color: var(--neon-blue);
            text-shadow: 0 0 10px var(--neon-blue);
        }

        .option-title {
            font-weight: 700;
            font-size: 1.1rem;
            color: var(--text-primary);
        }

        .option-description {
            font-size: 14px;
            color: var(--text-secondary);
            line-height: 1.4;
            margin-left: 45px;
        }

        .scan-button {
            width: 100%;
            padding: 22px;
            background: linear-gradient(135deg, var(--bright-blue), var(--purple));
            color: var(--text-primary);
            border: none;
            border-radius: 15px;
            font-size: 18px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 2px;
            position: relative;
            overflow: hidden;
        }

        .scan-button:hover {
            transform: translateY(-3px);
            box-shadow: 
                0 15px 30px rgba(15, 76, 117, 0.4),
                0 0 30px rgba(0, 229, 255, 0.3);
        }

        .scan-button:disabled {
            background: linear-gradient(135deg, #555, #777);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .results-section {
            display: none;
        }

        .results-section.show {
            display: block;
            animation: slideUp 0.6s ease;
        }

        @keyframes slideUp {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .loading {
            text-align: center;
            padding: 50px;
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 4px solid rgba(255, 255, 255, 0.1);
            border-top: 4px solid var(--neon-blue);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 25px;
            box-shadow: 0 0 20px rgba(0, 229, 255, 0.3);
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .progress-bar {
            width: 100%;
            height: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            overflow: hidden;
            margin: 25px 0;
            position: relative;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--neon-blue), var(--neon-purple));
            width: 0%;
            transition: width 0.4s ease;
            border-radius: 15px;
            box-shadow: 0 0 15px rgba(0, 229, 255, 0.5);
        }

        .progress-text {
            font-size: 1.1rem;
            color: var(--text-secondary);
            margin-top: 15px;
        }

        .result-item {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid var(--glass-border);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .result-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            background: linear-gradient(135deg, var(--danger), #f44336);
        }

        .result-item:hover {
            transform: translateX(5px);
            background: rgba(255, 255, 255, 0.08);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .result-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }

        .result-icon {
            font-size: 1.5rem;
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.1);
            color: var(--danger);
        }

        .result-title {
            font-weight: 700;
            font-size: 1.2rem;
            color: var(--text-primary);
            flex: 1;
        }

        .risk-badge {
            padding: 6px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            background: linear-gradient(135deg, var(--danger), #f44336);
            color: white;
        }

        .result-description {
            color: var(--text-secondary);
            line-height: 1.6;
            margin-bottom: 15px;
        }

        .result-details {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            padding: 15px;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 14px;
        }

        .result-details strong {
            color: var(--neon-blue);
        }

        .vulnerability-count {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: linear-gradient(135deg, var(--danger), #f44336);
            color: white;
            padding: 8px 20px;
            border-radius: 25px;
            font-size: 14px;
            font-weight: 600;
            margin-left: 15px;
            box-shadow: 0 5px 15px rgba(255, 23, 68, 0.3);
        }

        .safe-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: linear-gradient(135deg, var(--success), #4caf50);
            color: white;
            padding: 8px 20px;
            border-radius: 25px;
            font-size: 14px;
            font-weight: 600;
            margin-left: 15px;
            box-shadow: 0 5px 15px rgba(0, 255, 136, 0.3);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid var(--glass-border);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.08);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, var(--neon-blue), var(--neon-purple));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .stat-label {
            color: var(--text-secondary);
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-top: 5px;
        }

        .alert {
            background: rgba(255, 23, 68, 0.1);
            border: 1px solid rgba(255, 23, 68, 0.3);
            border-radius: 10px;
            padding: 15px;
            margin: 20px 0;
            color: var(--danger);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .alert.success {
            background: rgba(0, 255, 136, 0.1);
            border-color: rgba(0, 255, 136, 0.3);
            color: var(--success);
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .header h1 {
                font-size: 2.5rem;
            }
            
            .scanner-card {
                padding: 30px 20px;
            }
            
            .scan-options {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="background-animation">
        <div class="floating-shapes">
            <div class="shape"></div>
            <div class="shape"></div>
            <div class="shape"></div>
            <div class="shape"></div>
        </div>
    </div>

    <div class="container">
        <div class="header">
            <div class="shield-icon">
                <i class="fas fa-shield-alt"></i>
            </div>
            <h1>CyberShield</h1>
            <p class="subtitle">Advanced Web Vulnerability Scanner & Security Assessment Tool</p>
        </div>

        <div class="scanner-card">
            <form id="scanForm">
                <div class="form-group">
                    <label for="targetUrl">
                        <i class="fas fa-globe"></i>
                        Target URL
                    </label>
                    <input type="url" id="targetUrl" class="url-input" placeholder="https://example.com" required>
                </div>

                <div class="form-group">
                    <label>
                        <i class="fas fa-search"></i>
                        Select Scan Types
                    </label>
                    <div class="scan-options">
                        <div class="option-card" onclick="toggleOption('sqli')">
                            <input type="checkbox" id="sqli" name="scanType" value="sqli">
                            <div class="option-header">
                                <div class="option-icon"><i class="fas fa-syringe"></i></div>
                                <div class="option-title">SQL Injection</div>
                            </div>
                            <div class="option-description">ตรวจสอบช่องโหว่การฉีด SQL ที่อาจทำให้เข้าถึงฐานข้อมูลได้</div>
                        </div>
                        
                        <div class="option-card" onclick="toggleOption('xss')">
                            <input type="checkbox" id="xss" name="scanType" value="xss">
                            <div class="option-header">
                                <div class="option-icon"><i class="fas fa-code"></i></div>
                                <div class="option-title">Cross-Site Scripting</div>
                            </div>
                            <div class="option-description">ตรวจสอบช่องโหว่ XSS ที่อาจทำให้แทรกสคริปต์ได้</div>
                        </div>
                        
                        <div class="option-card" onclick="toggleOption('dir')">
                            <input type="checkbox" id="dir" name="scanType" value="dir">
                            <div class="option-header">
                                <div class="option-icon"><i class="fas fa-folder-open"></i></div>
                                <div class="option-title">Directory Scanning</div>
                            </div>
                            <div class="option-description">ค้นหาไดเรกทอรีและไฟล์ที่เข้าถึงได้โดยไม่ได้รับอนุญาต</div>
                        </div>
                        
                        <div class="option-card" onclick="toggleOption('lfi')">
                            <input type="checkbox" id="lfi" name="scanType" value="lfi">
                            <div class="option-header">
                                <div class="option-icon"><i class="fas fa-file-code"></i></div>
                                <div class="option-title">File Inclusion</div>
                            </div>
                            <div class="option-description">ตรวจสอบช่องโหว่ LFI ที่อาจทำให้อ่านไฟล์ระบบได้</div>
                        </div>
                        
                        <div class="option-card" onclick="toggleOption('crawler')">
                            <input type="checkbox" id="crawler" name="scanType" value="crawler">
                            <div class="option-header">
                                <div class="option-icon"><i class="fas fa-spider"></i></div>
                                <div class="option-title">Web Crawler</div>
                            </div>
                            <div class="option-description">รวบรวม URL เพิ่มเติมจากเว็บไซต์เพื่อสแกนอย่างละเอียด</div>
                        </div>
                        
                        <div class="option-card" onclick="toggleOption('all')">
                            <input type="checkbox" id="all" name="scanType" value="all">
                            <div class="option-header">
                                <div class="option-icon"><i class="fas fa-rocket"></i></div>
                                <div class="option-title">Full Security Scan</div>
                            </div>
                            <div class="option-description">เรียกใช้การสแกนความปลอดภัยทุกประเภทอย่างครบถ้วน</div>
                        </div>
                    </div>
                </div>

                <button type="submit" class="scan-button" id="scanBtn">
                    <i class="fas fa-play"></i> Start Security Scan
                </button>
            </form>
        </div>

        <div class="results-section" id="resultsSection">
            <div class="scanner-card">
                <div id="loadingArea" class="loading">
                    <div class="loading-spinner"></div>
                    <p style="font-size: 1.2rem; margin-bottom: 10px;">กำลังสแกนเว็บไซต์...</p>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <div class="progress-text" id="progressText">เริ่มต้นการสแกน...</div>
                </div>
                
                <div id="resultsArea" style="display: none;">
                    <h2 id="resultsTitle">
                        <i class="fas fa-chart-bar"></i> Security Assessment Results
                    </h2>
                    
                    <div class="stats-grid" id="statsGrid"></div>
                    
                    <div id="resultsContent"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function toggleOption(optionId) {
            const checkbox = document.getElementById(optionId);
            const card = checkbox.closest('.option-card');
            
            if (optionId === 'all') {
                document.querySelectorAll('.option-card').forEach(c => {
                    if (c !== card) {
                        c.classList.remove('selected');
                        c.querySelector('input').checked = false;
                    }
                });
            } else {
                const allCard = document.getElementById('all').closest('.option-card');
                allCard.classList.remove('selected');
                document.getElementById('all').checked = false;
            }
            
            checkbox.checked = !checkbox.checked;
            card.classList.toggle('selected', checkbox.checked);
        }

        function showError(message) {
            const loadingArea = document.getElementById('loadingArea');
            const resultsArea = document.getElementById('resultsArea');
            
            loadingArea.style.display = 'none';
            resultsArea.style.display = 'block';
            
            document.getElementById('resultsTitle').innerHTML = `
                <i class="fas fa-exclamation-triangle"></i> เกิดข้อผิดพลาด
            `;
            
            document.getElementById('resultsContent').innerHTML = `
                <div class="alert">
                    <i class="fas fa-exclamation-circle"></i>
                    ${message}
                </div>
            `;
        }

        function displayResults(vulnerabilities) {
            const loadingArea = document.getElementById('loadingArea');
            const resultsArea = document.getElementById('resultsArea');
            const resultsContent = document.getElementById('resultsContent');
            const resultsTitle = document.getElementById('resultsTitle');
            const statsGrid = document.getElementById('statsGrid');

            loadingArea.style.display = 'none';
            resultsArea.style.display = 'block';

            // Update stats
            const totalVulns = vulnerabilities.length;
            statsGrid.innerHTML = `
                <div class="stat-card">
                    <div class="stat-number">${totalVulns}</div>
                    <div class="stat-label">Total Vulnerabilities</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${vulnerabilities.filter(v => v.type.includes('SQL')).length}</div>
                    <div class="stat-label">SQL Injection</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${vulnerabilities.filter(v => v.type.includes('XSS')).length}</div>
                    <div class="stat-label">XSS Issues</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${vulnerabilities.filter(v => v.type.includes('Directory') || v.type.includes('LFI')).length}</div>
                    <div class="stat-label">File Issues</div>
                </div>
            `;

            if (vulnerabilities.length === 0) {
                resultsTitle.innerHTML = `
                    <i class="fas fa-shield-alt"></i> Security Assessment Complete 
                    <span class="safe-badge"><i class="fas fa-check"></i> Secure</span>
                `;
                
                resultsContent.innerHTML = `
                    <div class="alert success">
                        <i class="fas fa-check-circle"></i>
                        ไม่พบช่องโหว่ด้านความปลอดภัยในการสแกนเบื้องต้น เว็บไซต์ผ่านการตรวจสอบแล้ว
                    </div>
                    <div class="result-item">
                        <div class="result-header">
                            <div class="result-icon" style="color: var(--success);">
                                <i class="fas fa-award"></i>
                            </div>
                            <div class="result-title">Security Status: Clean</div>
                            <span class="risk-badge" style="background: linear-gradient(135deg, var(--success), #4caf50);">Safe</span>
                        </div>
                        <div class="result-description">
                            เว็บไซต์นี้ผ่านการตรวจสอบช่องโหว่ด้านความปลอดภัยเบื้องต้นแล้ว ไม่พบจุดอ่อนที่เป็นอันตรายในขณะนี้
                        </div>
                    </div>
                `;
            } else {
                resultsTitle.innerHTML = `
                    <i class="fas fa-exclamation-triangle"></i> Security Assessment Complete 
                    <span class="vulnerability-count">
                        <i class="fas fa-bug"></i> ${vulnerabilities.length} Issues Found
                    </span>
                `;
                
                let resultsHTML = `
                    <div class="alert">
                        <i class="fas fa-exclamation-triangle"></i>
                        พบช่องโหว่ด้านความปลอดภัยทั้งหมด ${vulnerabilities.length} รายการ ควรดำเนินการแก้ไขโดยเร็ว
                    </div>
                `;

                vulnerabilities.forEach((vuln, index) => {
                    const iconMap = {
                        'SQL Injection': 'fas fa-syringe',
                        'XSS (Form)': 'fas fa-code',
                        'XSS (URL)': 'fas fa-code',
                        'Directory Traversal': 'fas fa-folder-open',
                        'LFI': 'fas fa-file-code'
                    };
                    
                    resultsHTML += `
                        <div class="result-item vulnerability">
                            <div class="result-header">
                                <div class="result-icon">
                                    <i class="${iconMap[vuln.type] || 'fas fa-bug'}"></i>
                                </div>
                                <div class="result-title">${index + 1}. ${vuln.type}</div>
                                <span class="risk-badge">High Risk</span>
                            </div>
                            <div class="result-description">
                                ${vuln.description || 'ช่องโหว่นี้อาจทำให้ผู้ไม่หวังดีสามารถเข้าถึงข้อมูลสำคัญหรือควบคุมระบบได้'}
                            </div>
                            <div class="result-details">
                                <strong>URL:</strong> ${vuln.url}<br>
                                ${vuln.payload ? `<strong>Payload/Parameter:</strong> <code>${vuln.payload}</code><br>` : ''}
                                <strong>Risk Level:</strong> สูง - ควรแก้ไขทันที
                            </div>
                        </div>
                    `;
                });

                resultsContent.innerHTML = resultsHTML;
            }
        }

        document.getElementById('scanForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const targetUrl = document.getElementById('targetUrl').value;
            const selectedOptions = Array.from(document.querySelectorAll('input[name="scanType"]:checked'))
                                         .map(input => input.value);
            
            if (selectedOptions.length === 0) {
                alert('กรุณาเลือกประเภทการสแกนอย่างน้อย 1 รายการ');
                return;
            }

            // แสดงส่วนผลลัพธ์และเริ่ม loading
            document.getElementById('resultsSection').classList.add('show');
            document.getElementById('loadingArea').style.display = 'block';
            document.getElementById('resultsArea').style.display = 'none';
            document.getElementById('progressFill').style.width = '0%';
            document.getElementById('progressText').textContent = 'เริ่มต้นการสแกน...';
            
            // ปิดใช้งานปุ่มสแกน
            const scanBtn = document.getElementById('scanBtn');
            scanBtn.disabled = true;
            scanBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Scanning...';

            try {
                // จำลอง progress
                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    document.getElementById('progressFill').style.width = progress + '%';
                    document.getElementById('progressText').textContent = 'กำลังสแกนเว็บไซต์...';
                }, 200);

                // ส่งข้อมูลไปยัง Flask backend
                const response = await fetch('/scan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        url: targetUrl,
                        scan_types: selectedOptions
                    })
                });

                clearInterval(progressInterval);
                document.getElementById('progressFill').style.width = '100%';
                document.getElementById('progressText').textContent = 'สแกนเสร็จสิ้น';

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                
                setTimeout(() => {
                    displayResults(data.vulnerabilities || []);
                }, 1000);
                
            } catch (error) {
                console.error('Scan error:', error);
                showError('ไม่สามารถเชื่อมต่อกับเซิร์ฟเวอร์ได้ กรุณาตรวจสอบการเชื่อมต่อและลองใหม่อีกครั้ง');
            } finally {
                // เปิดใช้งานปุ่มสแกนใหม่
                setTimeout(() => {
                    scanBtn.disabled = false;
                    scanBtn.innerHTML = '<i class="fas fa-play"></i> Start Security Scan';
                }, 2000);
            }
        });
    </script>
</body>
</html>
'''

def parse_scanner_output(output_text):
    """แปลงผลลัพธ์จาก scanner.py ให้เป็น JSON format"""
    vulnerabilities = []
    lines = output_text.split('\n')
    
    current_vuln = None
    for line in lines:
        line = line.strip()
        if '[!]' in line:
            # พบช่องโหว่
            if 'SQL Injection' in line:
                vuln_type = 'SQL Injection'
            elif 'XSS' in line and 'form' in line.lower():
                vuln_type = 'XSS (Form)'
            elif 'XSS' in line and 'URL' in line:
                vuln_type = 'XSS (URL)'
            elif 'Found:' in line:
                vuln_type = 'Directory Traversal'
            elif 'LFI' in line:
                vuln_type = 'LFI'
            else:
                vuln_type = 'Unknown Vulnerability'
            
            # Extract URL from the line
            url = ''
            if 'at ' in line:
                url_part = line.split('at ')[-1]
                if 'with payload' in url_part:
                    url = url_part.split(' with payload')[0].strip()
                else:
                    url = url_part.strip()
            elif 'Found: ' in line:
                url = line.split('Found: ')[-1].split(' (')[0].strip()
            
            # Extract payload if exists
            payload = ''
            if 'with payload:' in line:
                payload = line.split('with payload:')[-1].strip()
            elif 'payload ' in line and "'" in line:
                start = line.find("'")
                end = line.rfind("'")
                if start != -1 and end != -1 and start != end:
                    payload = line[start:end+1]
            
            vulnerability = {
                'type': vuln_type,
                'url': url,
                'description': f"ตรวจพบช่องโหว่ {vuln_type}",
                'payload': payload
            }
            vulnerabilities.append(vulnerability)
    
    return vulnerabilities

def run_scanner_async(target_url, scan_types, scan_id):
    """รันสแกนเนอร์แบบ async และเก็บผลลัพธ์"""
    try:
        # สร้างคำสั่งสำหรับรัน scanner.py
        command = ['python', 'scanner.py', '--url', target_url]
        
        # เพิ่มตัวเลือกการสแกน
        if 'all' in scan_types:
            command.append('--all')
        else:
            for scan_type in scan_types:
                if scan_type == 'sqli':
                    command.append('--sqli')
                elif scan_type == 'xss':
                    command.append('--xss')
                elif scan_type == 'dir':
                    command.append('--dir')
                elif scan_type == 'lfi':
                    command.append('--lfi')
                elif scan_type == 'crawler':
                    command.append('--crawler')
        
        # อัพเดท progress
        scan_progress[scan_id] = {'progress': 10, 'status': 'กำลังเริ่มสแกน...'}
        
        # รันคำสั่ง
        result = subprocess.run(command, capture_output=True, text=True, timeout=300)
        
        scan_progress[scan_id] = {'progress': 90, 'status': 'กำลังประมวลผล...'}
        
        # แปลงผลลัพธ์
        vulnerabilities = []
        if result.returncode == 0:
            vulnerabilities = parse_scanner_output(result.stdout)
        else:
            print(f"Scanner error: {result.stderr}")
        
        # เก็บผลลัพธ์
        scan_results[scan_id] = {
            'vulnerabilities': vulnerabilities,
            'completed': True,
            'error': None if result.returncode == 0 else result.stderr
        }
        
        scan_progress[scan_id] = {'progress': 100, 'status': 'สแกนเสร็จสิ้น'}
        
    except subprocess.TimeoutExpired:
        scan_results[scan_id] = {
            'vulnerabilities': [],
            'completed': True,
            'error': 'การสแกน timeout หลังจาก 5 นาที'
        }
    except Exception as e:
        scan_results[scan_id] = {
            'vulnerabilities': [],
            'completed': True,
            'error': str(e)
        }

@app.route('/')
def index():
    """แสดงหน้าเว็บหลัก"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/scan', methods=['POST'])
def start_scan():
    """เริ่มการสแกน"""
    try:
        data = request.get_json()
        target_url = data.get('url')
        scan_types = data.get('scan_types', ['all'])
        
        if not target_url:
            return jsonify({'error': 'URL is required'}), 400
        
        # สร้าง scan ID
        scan_id = f"scan_{int(time.time())}"
        
        # เริ่มสแกนในเทรดแยก
        thread = threading.Thread(
            target=run_scanner_async, 
            args=(target_url, scan_types, scan_id)
        )
        thread.daemon = True
        thread.start()
        
        return jsonify({
            'scan_id': scan_id,
            'status': 'started',
            'message': 'การสแกนเริ่มแล้ว'
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/scan/<scan_id>/progress')
def get_scan_progress(scan_id):
    """ดู progress ของการสแกน"""
    if scan_id in scan_progress:
        progress_data = scan_progress[scan_id]
        completed = scan_id in scan_results
        return jsonify({
            'progress': progress_data['progress'],
            'status': progress_data['status'],
            'completed': completed
        })
    else:
        return jsonify({'error': 'Scan not found'}), 404

@app.route('/scan/<scan_id>/results')
def get_scan_results(scan_id):
    """ดูผลลัพธ์การสแกน"""
    if scan_id in scan_results:
        result_data = scan_results[scan_id]
        if result_data['error']:
            return jsonify({'error': result_data['error']}), 500
        
        return jsonify({
            'vulnerabilities': result_data['vulnerabilities'],
            'total_vulnerabilities': len(result_data['vulnerabilities']),
            'scan_completed': True
        })
    else:
        return jsonify({'error': 'Scan results not found'}), 404

if __name__ == '__main__':
    print("🛡️  CyberShield Web Vulnerability Scanner")
    print("🚀 Starting Flask server...")
    print("📡 Access the web interface at: http://localhost:5000")
    print("=" * 50)
    app.run(debug=True, host='0.0.0.0', port=5000)